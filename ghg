#!/bin/bash

print_usage() {
  printf "Usage: ./ghgit <command> [options]\n"
  printf "Commands:\n"
  printf "  create username/repo visibility [-b branch] [-g gitignore]\n"
  printf "  remove username/repo\n"
  printf "Options:\n"
  printf "  -b branch    Specify a branch name\n"
  printf "  -g gitignore Specify a .gitignore template\n"
}

create_repo() {
  REPO=$1
  VISIBILITY=$2
  BRANCH=$3
  GITIGNORE=$4

  # If the branch name is not provided, use 'main' as default
  BRANCH=${BRANCH:-main}

  USERNAME=$(echo $REPO | cut -d'/' -f1)
  REPONAME=$(echo $REPO | cut -d'/' -f2)

  if [ -z "$REPO" ] || [ -z "$VISIBILITY" ]
  then
      echo "Please specify a repo in the format username/repo and visibility (public or private)"
      exit 1
  fi

  if [ "$VISIBILITY" != "public" ] && [ "$VISIBILITY" != "private" ]
  then
      echo "Invalid visibility. Please specify either public or private."
      exit 1
  fi

  OUTPUT=$(yes | gh repo create $REPO --$VISIBILITY 2>&1)

  if [[ $OUTPUT == *"already exists"* ]]; then
    echo "Repo $REPO already exists. Please specify a different repo."
    exit 1
  fi

  mkdir $REPONAME && cd $REPONAME
  git init

  # Create .gitignore file if a template was provided
  if [ -n "$GITIGNORE" ]; then
    curl -o .gitignore "https://raw.githubusercontent.com/github/gitignore/master/${GITIGNORE}.gitignore"
    git add .gitignore
  fi

  echo "# $REPONAME" > README.md
  git add README.md
  git commit -m "Initial commit"

  git remote add origin git@github.com:$REPO.git
  git push -u origin $BRANCH

  echo "Local repo $REPONAME synced with remote $REPO"
}

remove_repo() {
  REPO=$1
  FORCE=$2
  REPONAME=$(echo $REPO | cut -d'/' -f2)

  if [[ $FORCE != '-y' ]]; then
    read -p "Are you sure you want to delete the repository $REPO and the local folder $REPONAME (y/n)? " RESPONSE
    if [[ $RESPONSE != 'Y' && $RESPONSE != 'y' ]]; then
      echo "Aborted deletion of $REPO and $REPONAME."
      exit 1
    fi
  fi

  gh repo delete $REPO --yes
  rm -rf $REPONAME
  echo "Repo $REPO and local folder $REPONAME have been deleted."
}

COMMAND=$1
shift

case "$COMMAND" in
  "create") create_repo $@ ;;
  "remove") remove_repo $@ ;;
  *) print_usage
     exit 1 ;;
esac
